// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BetPlaced extends ethereum.Event {
  get params(): BetPlaced__Params {
    return new BetPlaced__Params(this);
  }
}

export class BetPlaced__Params {
  _event: BetPlaced;

  constructor(event: BetPlaced) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wager(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get choice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BetResult extends ethereum.Event {
  get params(): BetResult__Params {
    return new BetResult__Params(this);
  }
}

export class BetResult__Params {
  _event: BetResult;

  constructor(event: BetResult) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get win(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get wager(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get payout(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TrustedSignerChanged extends ethereum.Event {
  get params(): TrustedSignerChanged__Params {
    return new TrustedSignerChanged__Params(this);
  }
}

export class TrustedSignerChanged__Params {
  _event: TrustedSignerChanged;

  constructor(event: TrustedSignerChanged) {
    this._event = event;
  }

  get newSigner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CoinBet__betsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getUser(): Address {
    return this.value0;
  }

  getWager(): BigInt {
    return this.value1;
  }

  getChoice(): BigInt {
    return this.value2;
  }

  getPayout(): BigInt {
    return this.value3;
  }

  getStatus(): boolean {
    return this.value4;
  }
}

export class CoinBet extends ethereum.SmartContract {
  static bind(address: Address): CoinBet {
    return new CoinBet("CoinBet", address);
  }

  bets(param0: Address, param1: BigInt): CoinBet__betsResult {
    let result = super.call(
      "bets",
      "bets(address,uint256):(address,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new CoinBet__betsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_bets(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<CoinBet__betsResult> {
    let result = super.tryCall(
      "bets",
      "bets(address,uint256):(address,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoinBet__betsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  getMaxBlockTimestampDelay(): BigInt {
    let result = super.call(
      "getMaxBlockTimestampDelay",
      "getMaxBlockTimestampDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxBlockTimestampDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxBlockTimestampDelay",
      "getMaxBlockTimestampDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxDataTimestampDelay(): BigInt {
    let result = super.call(
      "getMaxDataTimestampDelay",
      "getMaxDataTimestampDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxDataTimestampDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxDataTimestampDelay",
      "getMaxDataTimestampDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isSignerAuthorized(_receviedSigner: Address): boolean {
    let result = super.call(
      "isSignerAuthorized",
      "isSignerAuthorized(address):(bool)",
      [ethereum.Value.fromAddress(_receviedSigner)]
    );

    return result[0].toBoolean();
  }

  try_isSignerAuthorized(
    _receviedSigner: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSignerAuthorized",
      "isSignerAuthorized(address):(bool)",
      [ethereum.Value.fromAddress(_receviedSigner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTimestampValid(_receivedTimestamp: BigInt): boolean {
    let result = super.call(
      "isTimestampValid",
      "isTimestampValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_receivedTimestamp)]
    );

    return result[0].toBoolean();
  }

  try_isTimestampValid(
    _receivedTimestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTimestampValid",
      "isTimestampValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_receivedTimestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastGeneratedRandomNumber(): BigInt {
    let result = super.call(
      "lastGeneratedRandomNumber",
      "lastGeneratedRandomNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastGeneratedRandomNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastGeneratedRandomNumber",
      "lastGeneratedRandomNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeSignerCall extends ethereum.Call {
  get inputs(): AuthorizeSignerCall__Inputs {
    return new AuthorizeSignerCall__Inputs(this);
  }

  get outputs(): AuthorizeSignerCall__Outputs {
    return new AuthorizeSignerCall__Outputs(this);
  }
}

export class AuthorizeSignerCall__Inputs {
  _call: AuthorizeSignerCall;

  constructor(call: AuthorizeSignerCall) {
    this._call = call;
  }

  get _trustedSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeSignerCall__Outputs {
  _call: AuthorizeSignerCall;

  constructor(call: AuthorizeSignerCall) {
    this._call = call;
  }
}

export class PlaceBetCall extends ethereum.Call {
  get inputs(): PlaceBetCall__Inputs {
    return new PlaceBetCall__Inputs(this);
  }

  get outputs(): PlaceBetCall__Outputs {
    return new PlaceBetCall__Outputs(this);
  }
}

export class PlaceBetCall__Inputs {
  _call: PlaceBetCall;

  constructor(call: PlaceBetCall) {
    this._call = call;
  }

  get choice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PlaceBetCall__Outputs {
  _call: PlaceBetCall;

  constructor(call: PlaceBetCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
